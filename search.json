[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020-2022 Ellis Hughes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/camcorder_record.html","id":"start-a-recording-with-gg_record","dir":"Articles","previous_headings":"","what":"Start a Recording with gg_record()","title":"Create animations of your design process","text":"initialize recording gg_record() function. running following code, {camcorder} saving file given specifications given directory every time ggplot() called. Note: want keep plot files afterwards, set dir gg_record permanent directory (instead temporary directory examples). Now can start building plot:","code":"library(camcorder)  gg_record(   dir = file.path(tempdir(), \"recording\"),    device = \"png\", # we need to set the Cairo device   width = 8,   height = 5 ) ggplot(diamonds, aes(x = carat, y = price)) +   geom_point() ggplot(diamonds, aes(x = carat, y = price)) +   geom_point(alpha = .2) ggplot(diamonds, aes(x = carat, y = price)) +   geom_bin2d() ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex() ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex() +   scale_fill_viridis_c(option = \"magma\") ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex() +   scale_fill_viridis_c(option = \"magma\", direction = -1) ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex() +   scale_fill_viridis_b(option = \"magma\", direction = -1) ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex(color = \"white\") +   scale_fill_viridis_b(option = \"magma\", direction = -1) ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex(color = \"white\") +   scale_fill_viridis_b(option = \"magma\", direction = -1) +   theme_minimal() ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex(color = \"white\") +   scale_fill_viridis_b(option = \"magma\", direction = -1) +   theme_minimal() +   theme(panel.grid.minor = element_blank()) ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex(color = \"white\") +   coord_cartesian(clip = \"off\") +   scale_y_continuous(labels = scales::dollar_format()) +   scale_fill_viridis_b(option = \"magma\", direction = -1) +   theme_minimal() +   theme(panel.grid.minor = element_blank()) +   labs(x = \"Carat\", y = NULL, fill = \"Number of diamonds\") ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex(color = \"white\") +   coord_cartesian(clip = \"off\") +   scale_y_continuous(labels = scales::dollar_format()) +   scale_fill_viridis_b(option = \"magma\", direction = -1) +   theme_minimal() +   theme(     panel.grid.minor = element_blank(),     legend.position = \"top\"   ) +   labs(x = \"Carat\", y = NULL, fill = \"Number of diamonds\") g <-    ggplot(diamonds, aes(x = carat, y = price)) +   geom_hex(color = \"white\") +   coord_cartesian(clip = \"off\") +   scale_y_continuous(labels = scales::dollar_format()) +   scale_fill_viridis_b(     option = \"magma\", direction = -1,     guide = guide_colorsteps(       title.position = \"top\", show.limits = TRUE,        barwidth = unit(16, \"lines\"), barheight = unit(.8, \"lines\")     )   ) +   theme_minimal() +   theme(     panel.grid.minor = element_blank(),     legend.position = \"top\"   ) +   labs(x = \"Carat\", y = NULL, fill = \"Number of diamonds\")  g"},{"path":"/articles/camcorder_record.html","id":"resize-plots-with-gg_resize_film","dir":"Articles","previous_headings":"","what":"Resize Plots with gg_resize_film()","title":"Create animations of your design process","text":"hex grid looks bit , let’s change aspect ratio final step calling gg_resize_film() function:","code":"gg_resize_film(   height = 5,   width = 5,   units = \"in\",   dpi = 600 ) g"},{"path":"/articles/camcorder_record.html","id":"create-a-gif-with-gg_playback","dir":"Articles","previous_headings":"","what":"Create a GIF with gg_playback()","title":"Create animations of your design process","text":"happy visualization, can create animation using automatically saved plots: rendering complete, gif saved opened viewer.","code":"gg_playback(   name = file.path(tempdir(), \"recording\", \"diamonds.gif\"),   first_image_duration = 4,   last_image_duration = 12,   frame_duration = .5,   image_resize = 900,   width = 800,   height = 800 )"},{"path":"/articles/camcorder_record.html","id":"end-a-recording-with-gg_stop_recording","dir":"Articles","previous_headings":"","what":"End a Recording with gg_stop_recording()","title":"Create animations of your design process","text":"ever wish stop automatic saving, just rungg_stop_recording().","code":""},{"path":"/articles/camcorder_view.html","id":"omit-running-and-typing-ggsave","dir":"Articles","previous_headings":"","what":"Omit Running and Typing ggsave()","title":"Improve your design workflow—and save time","text":"obvious feature: {camcorder} saves file given specifications given directory every time ggplot() called don’t run ggsave() ggplot() function call. Also, don’t need type copy-paste modify multiple ggsave() snippets e.g. avoids overwriting previous plot default keeps code clean. want keep plot files session, set dir gg_record permanent directory (instead temporary directory examples).","code":""},{"path":"/articles/camcorder_view.html","id":"inspect-the-final-plot-directly-with-specified-dimensions","dir":"Articles","previous_headings":"","what":"Inspect the Final Plot Directly with Specified Dimensions","title":"Improve your design workflow—and save time","text":"often raised question responsive behavior Plots pane RStudio IDE. dimensions used pane rely window size related width height script. leads annoying user experience one spends tremendous time styling size geometries theme elements—saved everything looks differently likely . {camcorder} saving plot file anyway, make use display saved file Viewer pane RStudio IDE. Since image saved previously custom settings, dimensions plot shown matches exactly use settings ggsave() call.  Note size geometries elements stays independently window size aspect ratio.","code":""},{"path":"/articles/record_polaroid.html","id":"example-with-geofacet","dir":"Articles","previous_headings":"","what":"Example with {geofacet}","title":"Capture plots from other devices with record_polaroid()","text":"example, use state_ranks dataset geofacet functions package. basic {camcorder} setup works expected.  replace facet_wrap() function facet_geo() though, plot saved, since geofacet uses printing function. record_polaroid() comes . adding (arguments needed), {camcorder} saves plot directory dimensions.","code":"library(ggplot2) library(geofacet) library(camcorder)  gg_record(device = \"png\", width = 8, height = 6)  ggplot(state_ranks) +   geom_col(aes(variable, rank, fill = variable)) +   coord_flip() +   facet_wrap(vars(state)) +   theme_bw() library(ggplot2) library(geofacet) library(camcorder)  gg_record(   dir = file.path(tempdir(), \"recording\"),   device = \"png\",   width = 8,   height = 6 )  ggplot(state_ranks) +   geom_col(aes(variable, rank, fill = variable)) +   coord_flip() +   facet_geo(vars(state)) +   theme_bw()  record_polaroid()"},{"path":"/articles/record_polaroid.html","id":"example-with-base-r","dir":"Articles","previous_headings":"","what":"Example with base R","title":"Capture plots from other devices with record_polaroid()","text":"record_polaroid() can used base R plots well. saves plot also displays image RStudio’s Viewer pane desired dimensions declared gg_record().","code":"library(camcorder)  gg_record(   dir = file.path(tempdir(), \"recording\"),   device = \"png\",   width = 8,   height = 6 )  plot(trees)  record_polaroid()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ellis Hughes. Author, maintainer. Cédric Scherer. Contributor. Georgios Karamanis. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hughes E (2022). camcorder: Record Plot History. R package version 0.1.0.9000.","code":"@Manual{,   title = {camcorder: Record Your Plot History},   author = {Ellis Hughes},   year = {2022},   note = {R package version 0.1.0.9000}, }"},{"path":"/index.html","id":"camcorder-","dir":"","previous_headings":"","what":"camcorder","title":"camcorder","text":"{camcorder} R package track automatically save graphics generated ggplot2 created across one multiple sessions eventual goal creating GIF showing plots saved sequentially design process. installation, package enables : save ggplot automatically every time run ggplot() format given specifications generate GIF showcases every step design process using image files inspect ggplot output directly specifications RStudio IDE—’ll get see1","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"camcorder","text":"Currently {camcorder} available GitHub, can installed using following command.","code":"# install.packages(\"camcorder\") remotes::install_github(\"thebioengineer/camcorder\")"},{"path":"/index.html","id":"goal-end-product","dir":"","previous_headings":"","what":"Goal End Product","title":"camcorder","text":"idea tracking plots part development process generating making-movie popularized two contributors project: Georgios Karamanis Cédric Scherer. wowed R community weekly “made” videos. examples goal end products. TidyTuesday 2020/28by Cédric Scherer TidyTuesday 2020/15by Georgios Karamanis","code":""},{"path":"/index.html","id":"how-to","dir":"","previous_headings":"","what":"How To","title":"camcorder","text":"get started, load {camcorder} initialize recording using gg_record() function. function several options, save recordings, device use save recordings, height/width image create. default save temporary directory recordings go away R session closed. recorder initialized, ggplot made printed automatically (automagically2) recorded. point, want save plots different format recorder initialized can done gg_resize_film() function. set size dpi plots going forward. Finally, generate final GIF, use gg_playback() function. user can define: - final GIF gets saved setting name argument, - duration first last images first_image_duration last_image_duration - delay frames seconds frame_duration rendering complete, GIF opened viewer.","code":"library(ggplot2) library(camcorder)  gg_record(   dir = file.path(tempdir(), \"recording100\"), # where to save the recording   device = \"png\", # device to use to save images   width = 4,      # width of saved image   height = 6,     # height of saved image   units = \"in\",   # units for width and height   dpi = 300       # dpi to use when saving image ) ggplot(mtcars, aes(x = mpg, y = hp)) +   geom_point()  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_point(aes(shape = as.factor(gear)))  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_point(aes(color = as.factor(gear)))  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_point(aes(color = as.factor(gear))) +   geom_path()  ggplot(mtcars, aes(x = mpg, y = hp)) +   geom_point(aes(color = disp)) +   geom_smooth()  ggplot(mtcars, aes(x = mpg, y = hp)) +   geom_smooth() +   geom_point(aes(color = disp))  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_smooth() +   geom_point(aes(color = disp)) +   scale_color_viridis_c() +   theme_light()  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_smooth() +   geom_point(aes(color = disp)) +   scale_color_viridis_c() +   theme_light() +   labs(     title = \"MPG vs Horse Power!\",     subtitle = \"Power and economy, the classic compromise!\"   )  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_smooth() +   geom_point(aes(color = disp)) +   scale_color_viridis_c() +   theme_light(base_family = \"Roboto Mono\") +   labs(     title = \"MPG vs Horse Power!\",     subtitle = \"Power and economy, the classic compromise!\"   )  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_smooth() +   geom_point(aes(color = disp)) +   scale_color_viridis_c() +   theme_light(base_family = \"Roboto Mono\") +   labs(     title = \"MPG vs Horse Power!\",     subtitle = \"Power and economy, the classic compromise!\",      x = \"Efficiency (Miles/Gallon)\",     y = \"Power (Horsepower)\",     color = \"Displacement\\n(Cubic Inch)\"   ) gg_resize_film(   height = 4,   width = 6,   units = \"in\",   dpi = 350 ) ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_smooth() +   geom_point(aes(color = disp)) +   scale_color_viridis_c() +   theme_light(base_family = \"Roboto Mono\") +   labs(     title = \"MPG vs Horse Power!\",     subtitle = \"Power and economy, the classic compromise!\",      x = \"Efficiency (Miles/Gallon)\",     y = \"Power (Horsepower)\",     color = \"Displacement\\n(Cubic Inch)\"   ) +   theme(     plot.title.position = \"plot\",     plot.title = element_text(face = \"bold\")   )  ggplot(mtcars, aes(x = mpg, y = hp)) +    geom_smooth() +   geom_point(aes(color = disp)) +   scale_color_viridis_c() +   theme_light(base_family = \"Roboto Mono\")  +   labs(     title = \"MPG vs Horse Power!\",     subtitle = \"Power and economy, the classic compromise!\",      x = \"Efficiency (Miles/Gallon)\",     y = \"Power (Horsepower)\",     color = \"Displacement\\n(Cubic Inch)\"   ) +   theme(     plot.title.position = \"plot\",     plot.title = element_text(face = \"bold\"),     panel.background = element_rect(colour = \"turquoise\", fill = \"turquoise\")   ) gg_playback(   name = file.path(tempdir(), \"recording\", \"vignette_gif.gif\"),   first_image_duration = 5,   last_image_duration = 15,   frame_duration = .4,   image_resize = 800 )"},{"path":"/reference/Recording.html","id":null,"dir":"Reference","previous_headings":"","what":"Record and generate plot histories — gg_record","title":"Record and generate plot histories — gg_record","text":"Record plots created time generate GIF plots    made 'R' session. Overrides print methods ggplot patchwork objects    'ggplot2' 'patchwork' packages respectively. resize film recording, reprints saves last plot Stop recording images camcorder.","code":""},{"path":"/reference/Recording.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record and generate plot histories — gg_record","text":"","code":"gg_record(   dir = NULL,   device = c(\"png\", \"pdf\", \"jpeg\", \"bmp\", \"tiff\", \"emf\", \"svg\", \"eps\", \"ps\"),   scale = 1,   width = NA,   height = NA,   units = c(\"in\", \"cm\", \"mm\", \"px\"),   dpi = 300,   limitsize = TRUE,   device_ext = NULL,   bg = NULL )  gg_playback(   name = NULL,   first_image_duration = 16,   last_image_duration = 20,   frame_duration = 0.25,   loop = TRUE,   image_resize = 600,   background = \"black\",   width = NULL,   height = NULL,   progress = interactive(),   playback = TRUE,   stoprecording = FALSE,   last_as_first = TRUE,   ... )  gg_resize_film(height = NA, width = NA, units = NA, dpi = NA)  gg_stop_recording()"},{"path":"/reference/Recording.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record and generate plot histories — gg_record","text":"dir directory save intermediate plots . Defaults temporary directory device Device use. Can either device function (e.g. png()), one \"png\", \"pdf\", \"jpeg\", \"bmp\", \"tiff\", \"emf\", \"svg\", \"eps\", \"ps\". scale Multiplicative scaling factor. width, height, units Plot size units (\"\", \"cm\", \"mm\", \"px\"). supplied, uses size current graphics device. dpi Plot resolution. Also accepts string input: \"retina\" (320), \"print\" (300), \"screen\" (72). Applies raster output types. limitsize TRUE (default), ggsave() save images larger 50x50 inches, prevent common error specifying dimensions pixels. device_ext file extension use images created. usually need populated manually. bg Background colour. NULL, uses plot.background fill value plot theme. name name gif first_image_duration n units frame_duration show last image last_image_duration n units frame_duration show last image frame_duration n seconds plot shown loop gif repeated. Set FALSE play , number indicate many times repeat first. image_resize size rescale images pixels background color set background gif. valid color string \"navyblue\" \"#000080\". Use \"none\" transparency. impact background images. progress print verbose status output playback Boolean, recording start playing turned gif? defaults TRUE stoprecording Boolean, plots stop recorded? defaults TRUE. last_as_first last plot displayed beginning ? ... arguments passed graphics device function, specified device.","code":""},{"path":"/reference/Recording.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record and generate plot histories — gg_record","text":"Used initialize recording, nothing returned Returns nothing. Used generate gif. Returns last plot generated, resized new dimensions Returns nothing. used side effect.","code":""},{"path":"/reference/Recording.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Record and generate plot histories — gg_record","text":"gg_playback(): gg_resize_film(): gg_stop_recording():","code":""},{"path":"/reference/Recording.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record and generate plot histories — gg_record","text":"","code":"if(require(ggplot2) & interactive()){   gg_record(dir = file.path(tempdir(),\"recording\"))   ggplot(data.frame(x = 1, y = 1), aes(x=x, y=y)) + geom_point() + ylim(0,4)   ggplot(data.frame(x = 1, y = 2), aes(x=x, y=y)) + geom_point() + ylim(0,4)    ## resize canvas of the last plot   gg_resize_film(height = 10, width = 5, dpi = 350)    ggplot(data.frame(x = 1, y = 3), aes(x=x, y=y)) + geom_point() + ylim(0,4)    gg_playback(tempfile(fileext = \".gif\")) } #> Loading required package: ggplot2"},{"path":"/reference/record_polaroid.html","id":null,"dir":"Reference","previous_headings":"","what":"Record Plots - generic — record_polaroid","title":"Record Plots - generic — record_polaroid","text":"plot types special print method, use function capture printed current graphics device save using current camcorder settings","code":""},{"path":"/reference/record_polaroid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record Plots - generic — record_polaroid","text":"","code":"record_polaroid()"},{"path":"/reference/record_polaroid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record Plots - generic — record_polaroid","text":"return value. Used side effect capturing current   graphics device saving set directory gg_record.","code":""},{"path":"/reference/record_polaroid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record Plots - generic — record_polaroid","text":"","code":"library(grid)  gg_record(device = \"png\", width = 10, height = 8, units = \"in\", dpi = 320)  ## make a plot using grobs grid.draw(rectGrob(width = 2, height = 2, gp = gpar(fill = \"green\"))) grid.draw(textGrob(\"Hello world\"))   record_polaroid()  gg_stop_recording()"},{"path":"/news/index.html","id":"camcorder-010","dir":"Changelog","previous_headings":"","what":"camcorder 0.1.0","title":"camcorder 0.1.0","text":"CRAN release: 2022-10-03 Added NEWS.md file track changes package. Capturing ggplot2/patchwork plots automatically Capturing graphic outputs record_polaroid() Preview outputs viewer saved Generate GIF history recorded tables","code":""}]
